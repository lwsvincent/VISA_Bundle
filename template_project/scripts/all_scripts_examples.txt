===============================================================================
                      TEMPLATE PROJECT - ALL SCRIPTS EXAMPLES
===============================================================================

This document contains example code for all scripts in the template project.
Generated on: 2025-07-15

===============================================================================
                                SHELL SCRIPTS
===============================================================================

1. SUBTREE-ADD.SH
-----------------
Purpose: Add template project as subtree to target project
Usage: ./subtree-add.sh <target-project-path> [template-project-path]

Key Features:
- Validates project paths and git repository status
- Checks for existing subtree and offers to replace
- Initializes template project as git repo if needed
- Adds template as subtree with squash option
- Provides colored output for better UX

Example Usage:
./subtree-add.sh ../am_report_generator
./subtree-add.sh /path/to/target/project /path/to/template/project


2. SUBTREE-SYNC.SH
------------------
Purpose: Sync template project updates to/from target project
Usage: ./subtree-sync.sh <operation> <target-project-path> [template-project-path]

Operations:
- pull: Pull updates from template to target
- push: Push changes from target back to template

Key Features:
- Determines main branch automatically (main/master)
- Checks for uncommitted changes
- Handles branch detection and Git Flow compatibility
- Reinstalls hooks after updates

Example Usage:
./subtree-sync.sh pull ../am_report_generator
./subtree-sync.sh push ../am_report_generator


3. SETUP-PROJECT.SH
-------------------
Purpose: Setup template project in target project
Usage: ./setup-project.sh (run from template_project directory)

Key Features:
- Detects project type (JavaScript, Python, Rust, Go)
- Creates project-specific configuration
- Installs git hooks automatically
- Creates CLAUDE.md for AI context
- Validates installation

Project Types Supported:
- Python: flake8, black, pytest checks
- JavaScript: eslint, typescript, jest checks
- Default: basic configuration


4. BATCH-SETUP.SH
-----------------
Purpose: Batch setup template project across multiple projects
Usage: ./batch-setup.sh [options]

Options:
- -c, --config FILE: Use specific config file
- -n, --dry-run: Show what would be done
- -v, --verbose: Verbose output

Key Features:
- YAML configuration parsing
- Parallel processing support
- Backup and continue-on-error options
- Progress tracking for multiple projects

Example Config (batch-config.yml):
projects:
  - path: '../am_report_generator'
    name: 'am_report_generator'
    type: 'python'
    enabled: true


5. UPDATE-ALL-PROJECTS.SH
-------------------------
Purpose: Update template project across all configured projects
Usage: ./update-all-projects.sh [options]

Options:
- -c, --config FILE: Use specific config file
- -p, --parallel: Run updates in parallel
- -n, --dry-run: Show what would be done

Key Features:
- Batch updating with progress tracking
- Parallel execution support
- Automatic re-setup after updates
- Results summary and error handling


6. VERSION-MANAGER.SH
--------------------
Purpose: Version management for template project
Usage: ./version-manager.sh <command> [options]

Commands:
- tag <version>: Create version tag
- list: List all version tags
- deploy <version>: Deploy specific version
- current: Show current version
- changelog: Generate changelog

Key Features:
- Semantic versioning validation
- Automated changelog generation
- Version deployment to projects
- Git tag management

Example Usage:
./version-manager.sh tag v1.0.0 -m "Initial release"
./version-manager.sh deploy v1.0.0


7. CHECK-RELEASE-READY.SH
-------------------------
Purpose: Check if project is ready for release
Usage: ./check-release-ready.sh

Checks Include:
- Git status and branch verification
- Project structure validation
- Version consistency across files
- Test execution
- Code quality (flake8, black)
- GitHub authentication

Features:
- Colored output with status indicators
- Comprehensive validation
- Chinese language support
- Detailed recommendations


8. PREPARE-RELEASE.SH
--------------------
Purpose: Prepare release (update versions, CHANGELOG) but don't push
Usage: ./prepare-release.sh [patch|minor|major] "Release description"

Version Types:
- patch: 1.0.4 → 1.0.5 (bug fixes)
- minor: 1.0.4 → 1.1.0 (new features)
- major: 1.0.4 → 2.0.0 (breaking changes)

Key Features:
- Automatic version incrementation
- Updates setup.py, pyproject.toml, __init__.py
- Updates CHANGELOG.md with new entry
- Cleans build artifacts
- Generates commit message

Example Usage:
./prepare-release.sh patch "Fix calculator division bug"
./prepare-release.sh minor "Add new export feature"


9. SUBTREE-MANAGER.SH
--------------------
Purpose: Unified subtree manager for template project
Usage: ./subtree-manager.sh <operation> <target-project-path> [template-project-path]

Operations:
- add: Add template as subtree
- pull: Pull template updates
- push: Push changes back

Key Features:
- Unified interface for all subtree operations
- Automatic branch detection
- Git status checking
- Comprehensive error handling
- Progress indicators

Example Usage:
./subtree-manager.sh add ../my_project
./subtree-manager.sh pull ../my_project
./subtree-manager.sh push ../my_project


10. RELEASE.SH
--------------
Purpose: Complete release automation script
Usage: ./release.sh <project_root> [version|version_type] [options]

Options:
- --skip-tests: Skip running tests
- --skip-upload: Skip PyPI upload
- --dry-run: Show what would be done

Release Process:
1. Version upgrade (update version files)
2. Run tests (pytest)
3. Build wheel package
4. Create GitHub release
5. Upload to PyPI

Key Features:
- Comprehensive release automation
- Error handling and rollback
- Progress tracking
- Release reporting
- Integration with all release tools

Example Usage:
./release.sh /path/to/project 1.2.3
./release.sh /path/to/project patch --skip-tests
./release.sh /path/to/project major --skip-upload


===============================================================================
                            RELEASE SCRIPTS
===============================================================================

11. BUILD-WHEEL.SH
------------------
Purpose: Build wheel package for release
Usage: ./build-wheel.sh <project_root>

Build Systems Supported:
- setuptools (setup.py)
- build package (pyproject.toml)
- poetry (pyproject.toml with poetry)

Key Features:
- Automatic build system detection
- Build artifact cleanup
- Wheel validation and testing
- Installation testing in virtual environment
- Build reporting

Process:
1. Detect build system
2. Clean previous artifacts
3. Build wheel package
4. Validate wheel file
5. Test installation
6. Generate build report


12. TEST-RELEASE.SH
------------------
Purpose: Test release in clean virtual environment
Usage: ./test-release.sh <project_root>

Key Features:
- Clean virtual environment creation
- Wheel package installation
- Requirements installation
- Test configuration detection
- Comprehensive test execution
- Dependency validation

Test Process:
1. Find and validate wheel file
2. Create isolated virtual environment
3. Install wheel package
4. Install test dependencies
5. Run pytest with configuration
6. Generate test report


13. GITHUB-RELEASE.SH
--------------------
Purpose: Create GitHub release and upload assets
Usage: ./github-release.sh <project_root>

Key Features:
- GitHub CLI and API support
- Automatic version detection
- Release existence checking
- Asset upload (wheels, docs)
- Release verification

Process:
1. Check GitHub authentication
2. Get project version
3. Check existing releases
4. Create GitHub release
5. Upload assets
6. Verify release
7. Generate release report


14. TEST-FULL-RELEASE.SH
-----------------------
Purpose: Test complete release flow for Python projects
Usage: ./test-full-release.sh [project_root]

Test Suite:
- Template structure validation
- Project structure checking
- Version utilities testing
- Changelog validation
- Wheel build testing
- Release testing
- GitHub API testing
- Configuration validation
- Integration testing

Key Features:
- Comprehensive test coverage
- Detailed reporting
- Cleanup after testing
- Pass/fail tracking
- Test result summaries


===============================================================================
                              PYTHON SCRIPTS
===============================================================================

15. VERSION-UTILS.PY
-------------------
Purpose: Version utilities for release management
Usage: python version-utils.py <project_root>

Classes:
- VersionUtils: Version extraction and validation
- ChangelogParser: Changelog parsing and validation

Key Features:
- Extracts versions from setup.py, pyproject.toml, __init__.py
- Semantic version validation
- Version comparison utilities
- Changelog parsing (Keep a Changelog format)
- Version consistency checking

Methods:
- get_project_version(): Get version from project files
- validate_semver(): Validate semantic version format
- compare_versions(): Compare two versions
- parse_changelog(): Parse changelog entries
- get_latest_version(): Get latest version from changelog


16. CHECK-CHANGELOG.PY
---------------------
Purpose: Check changelog version consistency for release
Usage: python check-changelog.py <project_root>

Validation Checks:
- Changelog file existence
- Project version extraction
- Semantic version validation
- Version consistency between project and changelog
- Changelog entry validation
- Content quality checks

Key Features:
- Colored status output
- Comprehensive validation
- Error reporting
- Integration with version-utils


17. GITHUB-API.PY
----------------
Purpose: GitHub API utilities for release management
Usage: python github-api.py <project_root> <version>

Classes:
- GitHubAPI: Low-level GitHub API client
- GitHubReleaseManager: High-level release management

Key Features:
- GitHub API authentication
- Repository info auto-detection
- Tag and release management
- Asset upload functionality
- Changelog integration
- Error handling and retries

Methods:
- create_tag_and_release(): Create tag and release
- upload_assets(): Upload release assets
- release_exists(): Check if release exists
- tag_exists(): Check if tag exists


===============================================================================
                           CONFIGURATION EXAMPLES
===============================================================================

BATCH-CONFIG.YML EXAMPLE:
-------------------------
projects:
  - path: '../am_report_generator'
    name: 'am_report_generator'
    type: 'python'
    enabled: true
    
  - path: '../am_shared'
    name: 'am_shared'
    type: 'python'
    enabled: true
    
  - path: '../gui_export_single_report'
    name: 'gui_export_single_report'
    type: 'javascript'
    enabled: true

settings:
  backup_before_setup: true
  continue_on_error: true
  parallel_processing: false

python_settings:
  install_dev_dependencies: true
  setup_virtual_env: false

javascript_settings:
  install_dev_dependencies: true
  setup_package_json: false


PRE-PUSH-RULES.YML EXAMPLE:
---------------------------
settings:
  fail_fast: true
  verbose: true
  timeout: 300

python:
  enabled: true
  checks:
    - name: "flake8"
      command: "flake8"
      args: ". --exclude=build,dist,.git --max-line-length=100"
      required: true
      
    - name: "black"
      command: "black"
      args: "--check . --exclude='(build|dist|\\.git)'"
      required: true
      
    - name: "pytest"
      command: "pytest"
      args: "--tb=short"
      required: true
      condition: "file_exists:pytest.ini"

javascript:
  enabled: true
  checks:
    - name: "eslint"
      command: "npx eslint"
      args: ". --ext .js,.jsx,.ts,.tsx"
      required: true
      
    - name: "typescript"
      command: "npx tsc"
      args: "--noEmit"
      required: true
      condition: "file_exists:tsconfig.json"

security:
  enabled: true
  checks:
    - name: "secret_scan"
      pattern: "(password|secret|key|token|api_key)"
      case_sensitive: false
      exclude_files: 
        - "*.md"
        - "*.txt"
        - "config/pre-push-rules.yml"

file_limits:
  max_file_size: "10MB"
  max_total_size: "100MB"


===============================================================================
                              USAGE WORKFLOWS
===============================================================================

INITIAL SETUP WORKFLOW:
-----------------------
1. Add template to target project:
   ./subtree-add.sh ../target_project

2. Setup template in target project:
   cd ../target_project/template_project
   ./scripts/setup-project.sh

3. Customize configuration:
   Edit config/pre-push-rules.yml for your project

4. Test the setup:
   git push (triggers pre-push hooks)


BATCH SETUP WORKFLOW:
---------------------
1. Create batch configuration:
   ./batch-setup.sh  # Creates example config

2. Edit batch-config.yml with your projects

3. Run batch setup:
   ./batch-setup.sh

4. Update all projects:
   ./update-all-projects.sh


RELEASE WORKFLOW:
----------------
1. Check release readiness:
   ./check-release-ready.sh

2. Prepare release:
   ./prepare-release.sh patch "Bug fixes and improvements"

3. Review changes:
   git diff

4. Complete release:
   ./release.sh . patch

5. Or use individual scripts:
   ./scripts/release/build-wheel.sh .
   ./scripts/release/test-release.sh .
   ./scripts/release/github-release.sh .


UPDATE WORKFLOW:
---------------
1. Update template in single project:
   ./subtree-sync.sh pull ../target_project

2. Update all projects:
   ./update-all-projects.sh

3. Push changes back to template:
   ./subtree-sync.sh push ../target_project


VERSION MANAGEMENT WORKFLOW:
----------------------------
1. Create version tag:
   ./version-manager.sh tag v1.0.0 -m "Initial release"

2. Deploy to projects:
   ./version-manager.sh deploy v1.0.0

3. Generate changelog:
   ./version-manager.sh changelog > CHANGELOG.md

4. List versions:
   ./version-manager.sh list


===============================================================================
                             TROUBLESHOOTING
===============================================================================

COMMON ISSUES:
-------------
1. Permission denied errors:
   - Run: chmod +x scripts/*.sh
   - Check: ls -la scripts/

2. Git subtree errors:
   - Ensure target is git repository
   - Check for uncommitted changes
   - Verify template project structure

3. Build failures:
   - Check Python/Node.js installation
   - Verify requirements.txt/package.json
   - Check build system configuration

4. Release failures:
   - Verify GitHub authentication
   - Check version consistency
   - Ensure tests pass

5. Hook installation issues:
   - Check .git/hooks directory
   - Verify file permissions
   - Check hook configuration


DEBUGGING COMMANDS:
------------------
- Check git status: git status
- View hooks: ls -la .git/hooks/
- Test hooks: bash .git/hooks/pre-push
- Check versions: python scripts/utils/version-utils.py .
- Validate changelog: python scripts/release/check-changelog.py .


===============================================================================
                               DEPENDENCIES
===============================================================================

REQUIRED TOOLS:
--------------
- Git (for version control)
- Python 3.7+ (for Python scripts)
- Bash (for shell scripts)

OPTIONAL TOOLS:
--------------
- GitHub CLI (gh) - for GitHub operations
- pytest - for Python testing
- flake8 - for Python linting
- black - for Python formatting
- twine - for PyPI uploads
- build - for Python package building
- poetry - for Poetry-based projects

PYTHON PACKAGES:
---------------
- requests - for GitHub API calls
- pyyaml - for configuration parsing
- pathlib - for path operations
- configparser - for configuration files

ENVIRONMENT VARIABLES:
---------------------
- GITHUB_TOKEN - for GitHub API authentication
- PYPI_TOKEN - for PyPI uploads (optional)


===============================================================================
                                CONCLUSION
===============================================================================

This template project provides a comprehensive set of tools for:
- Project setup and management
- Version control with Git subtrees
- Release automation
- Quality assurance
- GitHub integration
- Multi-project batch operations

All scripts are designed to work together as a cohesive system while being
usable independently. The modular design allows for easy customization and
extension based on specific project needs.

For more information, see the individual script files and documentation in
the docs/ directory.

===============================================================================
                           END OF DOCUMENTATION
===============================================================================